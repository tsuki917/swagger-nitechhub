openapi: "3.0.3"

info:
  title: "Sample API"
  description: "This is a sample API"
  version: "1.0.0"

servers:
  - url: "http://localhost:3001"
    description: "開発環境"

tags:
  - name: "users"
    description: "ユーザーの操作"
  - name: "tags"
    description: "タグの操作"
  - name: "dms"
    description: "DMの操作"

paths:
  "/users/{userId}":
    get:
      summary: "ユーザーの取得"
      tags: ["users"]
      deprecated: false
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ユーザーID"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  "/users":
    put:
      summary: "ユーザーの作成"
      tags: ["users"]
      deprecated: false
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ユーザーID"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/updateUserRequest"
      responses:
        "200":
          description: "成功"
  "/users/random/{userId}":
    get:
      summary: "ランダムなユーザーの取得"
      tags: ["users"]
      deprecated: false
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ユーザーID"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  "/users/fav":
    post:
      summary: "お気に入りユーザーの追加"
      tags: ["users"]
      deprecated: false
      # parameters:
      #   - name: "userId"
      #     in: "path"
      #     required: true
      #     schema:
      #       type: "string"
      #     description: "ユーザーID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                favUserId:
                  type: "string"
            example:
              userId: "cnt14069"
              favUserId: "cnt14070"
      responses:
        "200":
          description: "成功"
    delete:
      summary: "お気に入りユーザーの削除"
      tags: ["users"]
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                favUserId:
                  type: "string"
            example:
              userId: "cnt14069"
              favUserId: "cnt14070"

      responses:
        "200":
          description: "成功"
  "/users/block":
    post:
      summary: "ユーザーのブロック"
      tags: ["users"]
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                blockUserId:
                  type: "string"
            example:
              userId: "cnt14069"
              blockUserId: "cnt14070"
      responses:
        "200":
          description: "成功"
    delete:
      summary: "ユーザーのブロック解除"
      tags: ["users"]
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                blockUserId:
                  type: "string"
            example:
              userId: "cnt14069"
              blockUserId: "cnt14070"
      responses:
        "200":
          description: "成功"
  "/users/relation/{userId}":
    get:
      summary: "ユーザーの関係性の取得"
      tags: ["users"]
      deprecated: false
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ユーザーID"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userRelationShip"
  "/users/tag/{tagId}":
    get:
      summary: "タグに紐づくユーザーの取得"
      tags: ["users"]
      deprecated: false
      parameters:
        - name: "tagId"
          in: "path"
          required: true
          schema:
            type: "array"
            items:
              type: "integer"
          description: "タグIDの配列"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/user"
  "/tags":
    get:
      summary: "すべてのタグの取得"
      tags: ["tags"]
      deprecated: false
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/tag"
    put:
      summary: "タグにユーザーを追加する"
      tags: ["tags"]
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                tagId:
                  type: "string"
            example:
              userId: "cnt14069"
              tagId: "cnt14070"
      responses:
        "200":
          description: "成功"
    delete:
      summary: "タグからユーザーを削除する"
      tags: ["tags"]
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                userId:
                  type: "string"
                tagId:
                  type: "string"
            example:
              userId: "cnt14069"
              tagId: "cnt14070"
      responses:
        "200":
          description: "成功"
  "/tags/countUsers":
    get:
      summary: "タグに紐づくユーザー数の取得"
      tags: ["tags"]
      deprecated: false
      parameters:
        - name: "tagIds"
          in: "query"
          required: true
          schema:
            type: "array"
            items:
              type: "integer"
          description: "タグIDの配列"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                type: "integer"

  "/dms/new_message/{dmId}":
    put:
      summary: "DMに新しいメッセージを追加"
      tags: ["dms"]
      deprecated: false
      parameters:
        - name: "dmId"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "DM ID"
      responses:
        "200":
          description: "成功"
  "/dms/data/{dmId}":
    get:
      summary: "DMの取得"
      tags: ["dms"]
      deprecated: false
      parameters:
        - name: "dmId"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "DM ID"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dm"
  "/dms/list/{userId}":
    get:
      summary: "DMのリスト取得"
      tags: ["dms"]
      deprecated: false
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ユーザーID"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dmList"

components:
  schemas:
    user:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        userId:
          type: "string"
          example: "cnt14069"
        name:
          type: "string"
          example: "鈴木涼真"
        gender:
          type: "string"
          example: "男"
        age:
          type: "integer"
          example: 20
        grade:
          type: "integer"
          example: 3
        field:
          type: "string"
          example: "情報工学科"
        introduction:
          type: "string"
          example: "こんにちは！"
        iconUrl:
          type: "string"
          example: "https://example.com/icon.png"
        tagList:
          type: "array"
          items:
            type:
            $ref: "#/components/schemas/tag"
        favPeopleList:
          type: "array"
          items:
            type: "string"
            example: "cnt14070"
        blockPeopleList:
          type: "array"
          items:
            type: "string"
            example: "cnt14071"
        favedPeopleList:
          type: "array"
          items:
            type: "string"
            example: "cnt14072"
        blockedPeopleList:
          type: "array"
          items:
            type: "string"
            example: "cnt14073"
    updateUserRequest:
      type: "object"
      properties:
        userId:
          type: "string"
        name:
          type: "string"
        gender:
          type: "string"
        age:
          type: "integer"
        grade:
          type: "string"
        field:
          type: "string"
        introduction:
          type: "string"
        iconImage:
            type: string
            format: binary
        profileImage:
            type: string
            format: binary
        coverImage:
            type: string
            format: binary
              
    userRelationShip:
      type: "object"
      properties:
        userId:
          type: "string"
        favPeopleList:
          type: "array"
          items:
            type: "string"
        blockPeopleList:
          type: "array"
          items:
            type: "string"
        favedPeopleList:
          type: "array"
          items:
            type: "string"
        blockedPeopleList:
          type: "array"
          items:
            type: "string"
    tag:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        name:
          type: "string"
          example: "プログラミング"
        count:
          type: "integer"
          example: 100
    dm:
      type: "object"
      properties:
        dmId:
          type: "string"
        user1Id:
          type: "string"
        user2Id:
          type: "string"
        messageIdList:
          type: "array"
          items:
            type: "string"
    dmList:
      type: "object"
      properties:
        user:
          type: 
          $ref: "#/components/schemas/user"
        message:
          type:
          $ref: "#/components/schemas/message"
    message:
      type: "object"
      properties:
        messageId:
          type: "string"
        from_userId:
          type: "string"
        to_userId:
          type: "string"
        text:
          type: "string"
        time:
          type: "string"